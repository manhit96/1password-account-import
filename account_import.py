import subprocess
import sys
import os
import glob
import json
import time
import itertools
import threading
import yaml
import csv
import pandas as pd
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from file_handlers import get_file_handler

# Th√™m c√°c h·∫±ng s·ªë cho file t·∫°m
TEMP_FILE = "temp_import_state.json"
TEMP_DIR = "temp"

def load_account_types() -> Dict:
    """Load account types from config file"""
    config_file = "account_types.yaml"
    if not os.path.exists(config_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh {config_file}")
        print("Vui l√≤ng t·∫°o file c·∫•u h√¨nh theo m·∫´u sau:")
        print("""
hotmail:
  title_prefix: "Hotmail:"
  url: "https://outlook.live.com"
  fields:
    - name: username
      type: text
      required: true
    - name: password
      type: password
      required: true
  parser:
    delimiter: "|"
    mapping:
      username: 0
      password: 1
        """)
        sys.exit(1)
        
    try:
        with open(config_file, 'r') as f:
            account_types = yaml.safe_load(f)
            if not account_types:
                print("‚ùå File c·∫•u h√¨nh tr·ªëng")
                sys.exit(1)
            return account_types
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file c·∫•u h√¨nh: {str(e)}")
        sys.exit(1)

def run_op_command(cmd, timeout=30):
    """Run 1Password CLI command with timeout"""
    try:
        return subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
    except subprocess.TimeoutExpired:
        print(f"‚ùå L·ªánh b·ªã timeout sau {timeout} gi√¢y")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói khi th·ª±c thi l·ªánh: {str(e)}")
        return None

def check_1password_cli():
    """Check if 1Password CLI is installed and logged in"""
    try:
        version_result = run_op_command(["op", "--version"])
        if not version_result or version_result.returncode != 0:
            print("‚ùå 1Password CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            print("Vui l√≤ng c√†i ƒë·∫∑t theo h∆∞·ªõng d·∫´n t·∫°i: https://1password.com/downloads/command-line/")
            sys.exit(1)
        
        whoami_result = run_op_command(["op", "whoami"])
        if whoami_result and whoami_result.returncode == 0:
            print("‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p 1Password CLI")
            return True
            
        print("üîë Ch∆∞a ƒëƒÉng nh·∫≠p 1Password CLI. ƒêang th·ª±c hi·ªán ƒëƒÉng nh·∫≠p...")
        login_result = subprocess.run(["op", "signin"], capture_output=False, text=True)
        
        if login_result.returncode == 0:
            print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
            return True
        else:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
            print("Vui l√≤ng ƒëƒÉng nh·∫≠p th·ªß c√¥ng b·∫±ng l·ªánh: op signin")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra 1Password CLI: {str(e)}")
        sys.exit(1)

def get_vault_list() -> List[Dict]:
    """L·∫•y danh s√°ch vault t·ª´ 1Password"""
    try:
        result = run_op_command(["op", "vault", "list", "--format", "json"])
        if result and result.returncode == 0:
            return json.loads(result.stdout)
        return []
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch vault: {str(e)}")
        return []

def get_vault_info() -> Optional[str]:
    """L·∫•y th√¥ng tin vault t·ª´ user"""
    global VAULT_LIST
    
    if not VAULT_LIST:
        VAULT_LIST = get_vault_list()
        if not VAULT_LIST:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch vault")
            return None
            
    print("\nüîê Danh s√°ch c√°c vault c√≥ s·∫µn:")
    print("\nSTT | ID                            | NAME")
    print("-" * 70)
    
    for idx, vault in enumerate(VAULT_LIST, 1):
        print(f"{idx:3d} | {vault['id']:<30} | {vault['name']}")
    
    while True:
        try:
            choice = int(input("\nNh·∫≠p s·ªë th·ª© t·ª± vault ƒë·ªÉ ch·ªçn (1-{}): ".format(len(VAULT_LIST))))
            if 1 <= choice <= len(VAULT_LIST):
                vault_id = VAULT_LIST[choice-1]['id']
                vault_name = VAULT_LIST[choice-1]['name']
                print(f"‚úÖ ƒê√£ ch·ªçn vault: {vault_name}")
                return vault_id
            print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")

def get_user_notes():
    """Get multiline notes from user"""
    print("\nüìù Nh·∫≠p ghi ch√∫ cho c√°c t√†i kho·∫£n:")
    print("- Nh·∫≠p n·ªôi dung ghi ch√∫ c·ªßa b·∫°n, enter ƒë·ªÉ xu·ªëng d√≤ng")
    print("- Nh·∫•n Ctrl+D (macOS/Linux) ho·∫∑c Ctrl+Z (Windows) ƒë·ªÉ k·∫øt th√∫c\n")
    
    lines = []
    try:
        while True:
            try:
                line = input("> ").rstrip()
                if line:
                    lines.append(line)
            except EOFError:
                if lines:
                    print(f"\n‚úÖ ƒê√£ l∆∞u {len(lines)} d√≤ng ghi ch√∫")
                return "\n".join(lines)
    except KeyboardInterrupt:
        if lines:
            print(f"\n‚úÖ ƒê√£ l∆∞u {len(lines)} d√≤ng ghi ch√∫")
        return "\n".join(lines)

def parse_line(line: str, account_type: Dict) -> Optional[Dict]:
    """Parse a line based on account type config"""
    try:
        # X·ª≠ l√Ω format m·ªõi
        if "format" in account_type:
            format_fields = account_type["format"].split(account_type.get("delimiter", "|"))
            delimiter = account_type.get("delimiter", "|")
            parts = line.strip().split(delimiter)
            
            if len(parts) < len(format_fields):
                return None, f"Thi·∫øu d·ªØ li·ªáu. C·∫ßn {len(format_fields)} tr∆∞·ªùng, ch·ªâ c√≥ {len(parts)} tr∆∞·ªùng"
                
            data = {}
            for i, field_name in enumerate(format_fields):
                if i < len(parts):
                    data[field_name] = parts[i].strip()
            
            # Validate required fields
            missing_fields = []
            for field in account_type["fields"]:
                if field["required"] and (field["name"] not in data or not data[field["name"]]):
                    missing_fields.append(field["name"])
            
            if missing_fields:
                return None, f"Thi·∫øu c√°c tr∆∞·ªùng: {', '.join(missing_fields)}"
                
            return data, None
            
        return None, "Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng trong c·∫•u h√¨nh"
        
    except Exception as e:
        return None, f"L·ªói khi parse d·ªØ li·ªáu: {str(e)}"

def add_to_1password(data: Dict, account_type: Dict, vault: str, notes: str = "") -> tuple:
    """Add a single item to 1Password"""
    try:
        # Create base command
        cmd = [
            "op", "item", "create",
            "--category", account_type.get("category", "login"),  # S·ª≠ d·ª•ng category t·ª´ config
            "--vault", vault,
            "--format", "json"
        ]
        
        # Add title based on category
        title_field = "username"  # M·∫∑c ƒë·ªãnh l√† username
        if account_type.get("category") == "credit-card":
            title_field = "cardholder_name"
        elif account_type.get("category") == "bank-account":
            title_field = "account_name"
        elif account_type.get("category") == "identity":
            title_field = "full_name"
            
        title = data.get(title_field, "Unknown")
        cmd.append("--title")
        cmd.append(f"{account_type['title_prefix']} {title}")
        
        # Add URL if provided
        if "url" in account_type:
            cmd.append("--url")
            cmd.append(account_type["url"])
        
        # Add fields based on config
        for field in account_type["fields"]:
            field_name = field["name"]
            if field_name in data and data[field_name]:  # Only add if field has value
                value = data[field_name].replace('"', '\\"').replace('$', '\\$').replace('`', '\\`')
                
                # Handle special fields
                if field["type"] == "otp":
                    cmd.append(f"totp={value}")
                elif field["type"] == "credit-card-number":
                    cmd.append(f"cardNumber={value}")
                elif field["type"] == "credit-card-type":
                    cmd.append(f"cardType={value}")
                elif field["type"] == "credit-card-expiry":
                    cmd.append(f"expiry={value}")
                elif field["type"] == "credit-card-cvv":
                    cmd.append(f"cvv={value}")
                else:
                    cmd.append(f"{field_name}[{field['type']}]={value}")
        
        # Add notes if provided
        if notes:
            cmd.append(f"notes[text]={notes}")
        
        result = run_op_command(cmd)
        
        if result and result.returncode == 0:
            try:
                response = json.loads(result.stdout)
                print(f"‚úÖ ƒê√£ th√™m {title} v√†o 1Password")
                return True, response.get('id')
            except json.JSONDecodeError as e:
                print(f"‚ùå Kh√¥ng th·ªÉ parse JSON response cho {title}")
                print(f"Response: {result.stdout}")
                return False, None
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ th√™m {title}")
            if result:
                print(f"L·ªói: {result.stderr}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå L·ªói khi th√™m {title}: {str(e)}")
        return False, None

def ensure_directories():
    """Ensure input and output directories exist"""
    os.makedirs("input", exist_ok=True)
    os.makedirs("output", exist_ok=True)

def get_input_files() -> List[str]:
    """Get all supported files from input directory"""
    input_files = []
    for ext in ['txt', 'csv', 'xlsx', 'xls']:
        input_files.extend(glob.glob(f"input/*.{ext}"))
    
    if not input_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c input!")
        print("H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: .txt, .csv, .xlsx, .xls")
        sys.exit(1)
    return input_files

def detect_account_type(filename: str, account_types: Dict) -> Optional[str]:
    """Try to detect account type from filename"""
    basename = os.path.basename(filename).lower()
    for acc_type in account_types.keys():
        if acc_type.lower() in basename:
            return acc_type
    return None

def get_account_type_for_file(filename: str, account_types: Dict) -> Dict:
    """Get account type configuration for a file"""
    print(f"\nüìÑ File: {os.path.basename(filename)}")
    
    # Try to detect from filename
    detected_type = detect_account_type(filename, account_types)
    if detected_type:
        print(f"üîç ƒê√£ ph√°t hi·ªán lo·∫°i t√†i kho·∫£n: {detected_type.upper()}")
        if confirm_action("B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng lo·∫°i t√†i kho·∫£n n√†y kh√¥ng?"):
            return account_types[detected_type]
    
    # Let user select manually
    return select_account_type(account_types)

def process_file(filename: str, account_type: Dict, vault_id: str, notes: str) -> None:
    """X·ª≠ l√Ω m·ªôt file input v√† th√™m c√°c t√†i kho·∫£n v√†o 1Password"""
    try:
        # L·∫•y handler ph√π h·ª£p cho file
        handler = get_file_handler(filename, account_type)
        if not handler:
            print(f"‚ùå Kh√¥ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng file: {filename}")
            return
            
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file
        accounts = handler.read_data()
        if not accounts:
            print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ file: {filename}")
            return
            
        # Th√™m t·ª´ng t√†i kho·∫£n v√†o 1Password
        total = len(accounts)
        success = 0
        skipped = 0
        
        for idx, account in enumerate(accounts, 1):
            try:
                # Th√™m t√†i kho·∫£n v√†o 1Password
                result, item_id = add_to_1password(account, account_type, vault_id, notes)
                if result:
                    success += 1
                else:
                    skipped += 1
                    
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω t√†i kho·∫£n {idx}: {str(e)}")
                skipped += 1
                
        # L∆∞u k·∫øt qu·∫£ v√†o file CSV
        output_file = os.path.join("output", f"{os.path.splitext(os.path.basename(filename))[0]}_result.csv")
        with open(output_file, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['username', 'password', 'status'])
            for account in accounts:
                writer.writerow([
                    account['username'],
                    account['password'],
                    'success' if account['username'] in [a['username'] for a in accounts[:success]] else 'skipped'
                ])
                
        print(f"\n‚úÖ Ho√†n th√†nh: {success}/{total}")
        print(f"\nüìù ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {output_file}")
        
        # L∆∞u th√¥ng tin v·ªÅ file ƒë√£ x·ª≠ l√Ω
        processed_files = []
        processed_lines = {}
        if os.path.exists(os.path.join(TEMP_DIR, TEMP_FILE)):
            with open(os.path.join(TEMP_DIR, TEMP_FILE), 'r') as f:
                state = json.load(f)
                processed_files = state.get('processed_files', [])
                processed_lines = state.get('processed_lines', {})
        
        if filename not in processed_files:
            processed_files.append(filename)
            processed_lines[filename] = idx  # L∆∞u s·ªë d√≤ng ƒë√£ x·ª≠ l√Ω
            save_import_state([], processed_files, processed_lines)
            
        print(f"\nüìä K·∫øt qu·∫£ x·ª≠ l√Ω file {filename}:")
        print(f"   - T·ªïng s·ªë d√≤ng: {total}")
        print(f"   - S·ªë t√†i kho·∫£n ƒë√£ th√™m: {success}")
        print(f"   - S·ªë d√≤ng b·ªã b·ªè qua: {skipped}")
        print(f"   - ƒê√£ x·ª≠ l√Ω ƒë·∫øn d√≤ng: {idx}")
        
    except Exception as e:
        print(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        raise

def select_account_type(account_types: Dict) -> Optional[Dict]:
    """Let user select account type"""
    print("\nüìã C√°c lo·∫°i t√†i kho·∫£n c√≥ s·∫µn:")
    types_list = list(account_types.items())
    
    for idx, (name, config) in enumerate(types_list, 1):
        print(f"\n{idx}. {name.upper()}")
        print(f"   - URL: {config.get('url', 'N/A')}")
        print(f"   - ƒê·ªãnh d·∫°ng: {config.get('format', 'N/A')}")
        print("   - C√°c tr∆∞·ªùng:")
        for field in config["fields"]:
            required = "(b·∫Øt bu·ªôc)" if field["required"] else "(t√πy ch·ªçn)"
            print(f"     + {field['name']}: {field['type']} {required}")
    
    while True:
        print(f"\nCh·ªçn lo·∫°i t√†i kho·∫£n (1-{len(types_list)}): ", end="")
        choice = input().strip()
        
        if not choice:
            print("‚ùå Vui l√≤ng ch·ªçn lo·∫°i t√†i kho·∫£n")
            continue
            
        try:
            idx = int(choice)
            if 1 <= idx <= len(types_list):
                selected_type = types_list[idx-1]
                print(f"‚úÖ ƒê√£ ch·ªçn lo·∫°i t√†i kho·∫£n: {selected_type[0].upper()}")
                return selected_type[1]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
    
    return None

def confirm_action(prompt: str, default: bool = True) -> bool:
    """Ask for confirmation with default value"""
    yn = 'Y/n' if default else 'y/N'
    print(f"\n{prompt} ({yn}): ", end="")
    answer = input().strip().lower()
    if not answer:
        return default
    return answer.startswith('y')

def ensure_temp_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c temp t·ªìn t·∫°i"""
    os.makedirs(TEMP_DIR, exist_ok=True)

def save_import_state(file_configs: List[Dict], processed_files: List[str], processed_lines: Dict[str, int] = None) -> None:
    """L∆∞u tr·∫°ng th√°i x·ª≠ l√Ω v√†o file t·∫°m"""
    if processed_lines is None:
        processed_lines = {}
        
    state = {
        'file_configs': file_configs,
        'processed_files': processed_files,
        'processed_lines': processed_lines
    }
    
    with open(os.path.join(TEMP_DIR, TEMP_FILE), 'w') as f:
        json.dump(state, f, indent=2)

def load_import_state() -> Tuple[List[Dict], List[str], Dict[str, int]]:
    """ƒê·ªçc tr·∫°ng th√°i x·ª≠ l√Ω t·ª´ file t·∫°m"""
    if not os.path.exists(os.path.join(TEMP_DIR, TEMP_FILE)):
        return None, None, None
        
    with open(os.path.join(TEMP_DIR, TEMP_FILE), 'r') as f:
        state = json.load(f)
        return (
            state.get('file_configs', []),
            state.get('processed_files', []),
            state.get('processed_lines', {})
        )

def clean_temp_files() -> None:
    """X√≥a c√°c file t·∫°m"""
    try:
        temp_path = os.path.join(TEMP_DIR, TEMP_FILE)
        if os.path.exists(temp_path):
            os.remove(temp_path)
            print(f"\nüßπ ƒê√£ x√≥a file t·∫°m: {temp_path}")
    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a file t·∫°m: {str(e)}")

def process_input_files(input_files: List[str], account_types: Dict) -> None:
    """X·ª≠ l√Ω t·ª´ng file input v√† h·ªèi user v·ªÅ vi·ªác x·ª≠ l√Ω"""
    
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c temp t·ªìn t·∫°i
    ensure_temp_dir()
    
    # Th·ª≠ ƒë·ªçc tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
    file_configs, processed_files, processed_lines = load_import_state()
    if file_configs:
        print("\nüìã Ti·∫øp t·ª•c x·ª≠ l√Ω t·ª´ tr·∫°ng th√°i tr∆∞·ªõc:")
        for idx, config in enumerate(file_configs, 1):
            if config['file'] not in processed_files:
                print(f"\n{idx}. File: {config['file']}")
                print(f"   - Lo·∫°i t√†i kho·∫£n: {list(account_types.keys())[list(account_types.values()).index(config['account_type'])].upper()}")
                print(f"   - Vault: {config['vault_id']}")
                if config['notes']:
                    print(f"   - Ghi ch√∫: {config['notes']}")
                if config['file'] in processed_lines:
                    print(f"   - ƒê√£ x·ª≠ l√Ω: {processed_lines[config['file']]} d√≤ng")
    else:
        # Hi·ªÉn th·ªã danh s√°ch file t√¨m th·∫•y
        print("\nüìÅ Danh s√°ch file t√¨m th·∫•y:")
        for idx, file in enumerate(input_files, 1):
            print(f"{idx}. {file}")
        print()
        
        # L∆∞u th√¥ng tin x·ª≠ l√Ω cho t·ª´ng file
        file_configs = []
        processed_files = []
        processed_lines = {}
        
        for file in input_files:
            print(f"\n{'='*50}")
            print(f"üìÑ ƒêang c·∫•u h√¨nh file: {file}")
            print(f"{'='*50}")
            
            # Ph√°t hi·ªán lo·∫°i t√†i kho·∫£n t·ª´ t√™n file
            account_type = get_account_type_for_file(file, account_types)
            if not account_type:
                print("‚è≠Ô∏è  B·ªè qua file n√†y")
                continue
                
            # Hi·ªÉn th·ªã th√¥ng tin file v√† h·ªèi user
            print(f"\nüìù Lo·∫°i t√†i kho·∫£n: {list(account_types.keys())[list(account_types.values()).index(account_type)].upper()}")
            
            while True:
                choice = input("\nB·∫°n c√≥ mu·ªën x·ª≠ l√Ω file n√†y kh√¥ng? (y/n): ").lower().strip()
                if choice in ['y', 'n']:
                    break
                print("‚ùå Vui l√≤ng ch·ªçn 'y' ho·∫∑c 'n'")
                
            if choice == 'n':
                print("‚è≠Ô∏è  B·ªè qua file n√†y")
                continue
                
            # L·∫•y vault ƒë·ªÉ l∆∞u
            vault_id = get_vault_info()
            if not vault_id:
                print("‚è≠Ô∏è  B·ªè qua file n√†y")
                continue
                
            # L·∫•y ghi ch√∫ t·ª´ user
            notes = get_user_notes()
            
            # L∆∞u c·∫•u h√¨nh
            file_configs.append({
                'file': file,
                'account_type': account_type,
                'vault_id': vault_id,
                'notes': notes
            })
            
            # L∆∞u tr·∫°ng th√°i ngay sau khi l·∫•y th√¥ng tin
            save_import_state(file_configs, processed_files, processed_lines)
            print(f"\nüíæ ƒê√£ l∆∞u th√¥ng tin cho file: {file}")
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt c·∫•u h√¨nh
        if not file_configs:
            print("\n‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x·ª≠ l√Ω")
            return
            
        print("\nüìã T√≥m t·∫Øt c·∫•u h√¨nh:")
        for idx, config in enumerate(file_configs, 1):
            print(f"\n{idx}. File: {config['file']}")
            print(f"   - Lo·∫°i t√†i kho·∫£n: {list(account_types.keys())[list(account_types.values()).index(config['account_type'])].upper()}")
            print(f"   - Vault: {config['vault_id']}")
            if config['notes']:
                print(f"   - Ghi ch√∫: {config['notes']}")
        
        # X√°c nh·∫≠n tr∆∞·ªõc khi x·ª≠ l√Ω
        if not confirm_action("\n‚ö†Ô∏è B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√°c file kh√¥ng?", default=True):
            print("‚ùå ƒê√£ h·ªßy thao t√°c")
            return
    
    # X·ª≠ l√Ω h√†ng lo·∫°t
    print("\nüîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t...")
    try:
        for config in file_configs:
            if config['file'] in processed_files:
                print(f"\n‚è≠Ô∏è  B·ªè qua file ƒë√£ x·ª≠ l√Ω: {config['file']}")
                continue
                
            print(f"\n{'='*50}")
            print(f"üìÑ ƒêang x·ª≠ l√Ω file: {config['file']}")
            print(f"{'='*50}")
            
            # X·ª≠ l√Ω file
            process_file(config['file'], config['account_type'], config['vault_id'], config['notes'])
            
            print(f"\n{'='*50}")
            print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω file: {config['file']}")
            print(f"{'='*50}\n")
        
        print("\n‚ú® ƒê√£ ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ c√°c file!")
        
        # X√≥a file t·∫°m sau khi ho√†n th√†nh
        clean_temp_files()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è ƒê√£ t·∫°m d·ª´ng x·ª≠ l√Ω")
        print("üíæ ƒê√£ l∆∞u tr·∫°ng th√°i ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c sau")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        print("üíæ ƒê√£ l∆∞u tr·∫°ng th√°i ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c sau")
        sys.exit(1)

def main():
    """H√†m ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh"""
    global VAULT_LIST
    
    # Ki·ªÉm tra 1Password CLI
    if not check_1password_cli():
        return
        
    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    ensure_directories()
    
    # ƒê·ªçc c·∫•u h√¨nh lo·∫°i t√†i kho·∫£n
    account_types = load_account_types()
    if not account_types:
        return
        
    # L·∫•y danh s√°ch file t·ª´ th∆∞ m·ª•c input
    input_files = get_input_files()
    if not input_files:
        return
        
    # L·∫•y danh s√°ch vault ngay sau khi ƒëƒÉng nh·∫≠p
    VAULT_LIST = get_vault_list()
    if not VAULT_LIST:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch vault")
        return
        
    # X·ª≠ l√Ω t·ª´ng file
    process_input_files(input_files, account_types)

if __name__ == "__main__":
    main() 